1. Mise en place de l'infrastructure (✅ Déjà fait)
✅ Organiser les dossiers et les fichiers
✅ Créer un Makefile unifié
✅ Fusionner les headers


2. Parsing et interprétation des commandes (Priorité Haute)
 Tokenization : Compléter la fonction pour découper une ligne de commande en tokens
Gérer les espaces, guillemets (simples et doubles), redirections, pipes
Implémenter la détection correcte des opérateurs (<, >, >>, <<, |)
 Analyse syntaxique : Convertir les tokens en structure de commande
Gérer les arguments de commande
Détecter les erreurs de syntaxe (par ex. pipe vide, redirection sans fichier)
 Expansion des variables :
Remplacer $VAR et $? par leur valeur
Respecter les règles d'expansion dans les guillemets simples/doubles

3. Exécution des commandes (Priorité Haute)
 Builtins : Compléter les fonctions intégrées
 cd : Gérer le changement de répertoire (avec et sans argument)
 pwd : Afficher le répertoire courant
 env : Afficher les variables d'environnement
 export : Ajouter/modifier des variables d'environnement
 unset : Supprimer des variables d'environnement
 echo : Afficher du texte (avec option -n)
 exit : Quitter le shell avec code de retour
 Exécution externe : Exécuter des programmes externes
Rechercher l'exécutable dans le PATH
Créer un processus enfant (fork)
Exécuter la commande (execve)

4. Redirections et pipes (Priorité Moyenne-Haute)
 Redirections :
 < : Redirection d'entrée
 > : Redirection de sortie (troncature)
 >> : Redirection de sortie (ajout)
 << : Here-document
 Pipes :
Connecter la sortie d'une commande à l'entrée de la suivante
Gérer les pipes multiples (cmd1 | cmd2 | cmd3)

5. Gestion de l'environnement (Priorité Moyenne)
 Variables d'environnement :
Stocker et gérer les variables d'environnement
Gérer la variable PATH pour la recherche d'exécutables
 Gestion du répertoire courant :
Mise à jour des variables PWD et OLDPWD

6. Signaux (Priorité Moyenne)
 SIGINT (Ctrl+C) : Interrompre la commande en cours
 SIGQUIT (Ctrl+\) : Quitter/créer un core dump
 EOF (Ctrl+D) : Quitter le shell proprement

7. Robustesse et gestion d'erreurs (Priorité Moyenne-Basse)
 Erreurs de syntaxe : Messages d'erreur clairs
 Codes de retour : Gérer correctement la variable $?
 Gestion des erreurs d'exécution : Propager les erreurs des commandes

8. Optimisations et finitions (Priorité Basse)
 Gestion de la mémoire : Vérifier les fuites mémoire
 Nettoyage du code : Clarifier les commentaires, nommer les fonctions correctement
 Tests exhaustifs : Tester tous les cas d'utilisation



Plan de travail recommandé

Semaine 1 : Parsing et exécution simple
Compléter le parsing des commandes simples
Implémenter l'exécution des builtins de base
Implémenter l'exécution des commandes externes

Semaine 2 : Redirections et variables
Ajouter les redirections simples (< et >)
Implémenter l'expansion des variables d'environnement
Compléter tous les builtins manquants

Semaine 3 : Pipes et fonctionnalités avancées
Implémenter les pipes
Ajouter les redirections avancées (>> et <<)
Gérer les signaux correctement

Semaine 4 : Robustesse et finitions
Gérer tous les cas d'erreurs possibles
Vérifier la conformité avec le sujet

Tests exhaustifs et correction des bugs
